diff --git a/clang/include/clang/AST/Expr.h b/clang/include/clang/AST/Expr.h
index c13b97119..c670712e5 100644
--- a/clang/include/clang/AST/Expr.h
+++ b/clang/include/clang/AST/Expr.h
@@ -1393,6 +1393,38 @@ public:
     return DeclRefExprBits.RefersToEnclosingVariableOrCapture;
   }
 
+  /// Sets the flag telling whether this expression refers to
+  /// a variable of a type that has explicit dezombified.
+  void setDezombiefyAlreadyPresent() {
+    DeclRefExprBits.DezombifyFlags = DezombifyAlreadyPresent;
+  }
+
+  /// Sets the flag telling whether this expression refers to
+  /// a variable of a type that may need to be dezombified.
+  void setDezombiefyCandidate() {
+    DeclRefExprBits.DezombifyFlags = DezombifyCandidate;
+  }
+
+  /// Sets the flag telling whether this expression refers to
+  /// a variable of a type that may need to be dezombified,
+  /// but a deeper flow analysis prove dezombified not really needed.
+  void setDezombiefyCandidateButRelaxed() {
+    DeclRefExprBits.DezombifyFlags = DezombifyCandidateButRelaxed;
+  }
+
+  /// Does this DeclRefExpr refer to a varialbe that may
+  /// need to be dezombified after all analysis stages.
+  bool isDezombiefyCandidateOrRelaxed() const {
+    return DeclRefExprBits.DezombifyFlags == DezombifyCandidate ||
+      DeclRefExprBits.DezombifyFlags == DezombifyCandidateButRelaxed;
+  }
+
+  /// Does this DeclRefExpr refer to a varialbe that really
+  /// needs to be dezombified after all analysis stages.
+  bool needsDezombiefyInstrumentation() const {
+    return DeclRefExprBits.DezombifyFlags == DezombifyCandidate;
+  }
+
   static bool classof(const Stmt *T) {
     return T->getStmtClass() == DeclRefExprClass;
   }
diff --git a/clang/include/clang/AST/ExprCXX.h b/clang/include/clang/AST/ExprCXX.h
index 6f0b68479..50eea4925 100644
--- a/clang/include/clang/AST/ExprCXX.h
+++ b/clang/include/clang/AST/ExprCXX.h
@@ -1110,6 +1110,7 @@ public:
   CXXThisExpr(SourceLocation L, QualType Ty, bool IsImplicit)
       : Expr(CXXThisExprClass, Ty, VK_RValue, OK_Ordinary) {
     CXXThisExprBits.IsImplicit = IsImplicit;
+    CXXThisExprBits.DezombiefyFlags = 0;
     CXXThisExprBits.Loc = L;
     setDependence(computeDependence(this));
   }
@@ -1125,6 +1126,38 @@ public:
   bool isImplicit() const { return CXXThisExprBits.IsImplicit; }
   void setImplicit(bool I) { CXXThisExprBits.IsImplicit = I; }
 
+  /// Sets the flag telling whether this expression refers to
+  /// a variable of a type that has explicit dezombified.
+  void setDezombiefyAlreadyPresent() {
+    CXXThisExprBits.DezombiefyFlags = DezombifyAlreadyPresent;
+  }
+
+  /// Sets the flag telling whether this expression refers to
+  /// a variable of a type that may need to be dezombified.
+  void setDezombiefyCandidate() {
+    CXXThisExprBits.DezombiefyFlags = DezombifyCandidate;
+  }
+
+  /// Sets the flag telling whether this expression refers to
+  /// a variable of a type that may need to be dezombified,
+  /// but a deeper flow analysis prove dezombified not really needed.
+  void setDezombiefyCandidateButRelaxed() {
+    CXXThisExprBits.DezombiefyFlags = DezombifyCandidateButRelaxed;
+  }
+
+  /// Does this DeclRefExpr refer to a varialbe that may
+  /// need to be dezombified after all analysis stages.
+  bool isDezombiefyCandidateOrRelaxed() const {
+    return CXXThisExprBits.DezombiefyFlags == DezombifyCandidate ||
+      CXXThisExprBits.DezombiefyFlags == DezombifyCandidateButRelaxed;
+  }
+
+  /// Does this DeclRefExpr refer to a varialbe that really
+  /// needs to be dezombified after all analysis stages.
+  bool needsDezombiefyInstrumentation() const {
+    return CXXThisExprBits.DezombiefyFlags == DezombifyCandidate;
+  }
+
   static bool classof(const Stmt *T) {
     return T->getStmtClass() == CXXThisExprClass;
   }
diff --git a/clang/include/clang/AST/Stmt.h b/clang/include/clang/AST/Stmt.h
index d3fad58fc..669a00359 100644
--- a/clang/include/clang/AST/Stmt.h
+++ b/clang/include/clang/AST/Stmt.h
@@ -363,6 +363,14 @@ protected:
     SourceLocation Loc;
   };
 
+  enum DREDezombifyFlags {
+    NoDezombify = 0,
+    DezombifyAlreadyPresent,
+    DezombifyCandidate,
+    DezombifyCandidateButRelaxed
+  };
+
+
   class DeclRefExprBitfields {
     friend class ASTStmtReader; // deserialization
     friend class DeclRefExpr;
@@ -375,6 +383,7 @@ protected:
     unsigned HadMultipleCandidates : 1;
     unsigned RefersToEnclosingVariableOrCapture : 1;
     unsigned NonOdrUseReason : 2;
+    unsigned DezombifyFlags : 2;
 
     /// The location of the declaration name itself.
     SourceLocation Loc;
@@ -653,6 +662,7 @@ protected:
 
     /// Whether this is an implicit "this".
     unsigned IsImplicit : 1;
+    unsigned DezombiefyFlags :2;
 
     /// The location of the "this".
     SourceLocation Loc;
diff --git a/clang/include/clang/ASTMatchers/ASTMatchers.h b/clang/include/clang/ASTMatchers/ASTMatchers.h
index 643419743..5ddb64c35 100644
--- a/clang/include/clang/ASTMatchers/ASTMatchers.h
+++ b/clang/include/clang/ASTMatchers/ASTMatchers.h
@@ -7277,6 +7277,17 @@ AST_MATCHER_P(OMPExecutableDirective, isAllowedToContainClauseKind,
 // End OpenMP handling.
 //----------------------------------------------------------------------------//
 
+/// Matches coroutine body  statements.
+extern const internal::VariadicDynCastAllOfMatcher<Stmt, CoroutineBodyStmt>
+    coroutineBodyStmt;
+
+/// Matches a coroutine that has a given body.
+AST_MATCHER_P(CoroutineBodyStmt, hasCoroutineBody, internal::Matcher<Stmt>, InnerMatcher) {
+  const Stmt *const Statement = internal::GetBodyMatcher<CoroutineBodyStmt>::get(Node);
+  return (Statement != nullptr &&
+          InnerMatcher.matches(*Statement, Finder, Builder));
+}
+
 } // namespace ast_matchers
 } // namespace clang
 
diff --git a/clang/include/clang/Basic/Attr.td b/clang/include/clang/Basic/Attr.td
index 60eaee783..f07999600 100644
--- a/clang/include/clang/Basic/Attr.td
+++ b/clang/include/clang/Basic/Attr.td
@@ -3452,3 +3452,60 @@ def Builtin : InheritableAttr {
   let SemaHandler = 0;
   let Documentation = [Undocumented];
 }
+
+
+def SafeMemoryNakedStruct : Attr {
+  let Spellings = [CXX11<"safememory","naked_struct">];
+  let Documentation = [SafeMemoryNakedStructDocs];
+}
+
+def SafeMemoryMayExtend : Attr {
+  let Spellings = [CXX11<"safememory","may_extend_to_this">];
+  let Documentation = [SafeMemoryMayExtendDocs];
+}
+
+def SafeMemoryNoAwait : Attr {
+  let Spellings = [CXX11<"safememory","no_await">];
+  let Documentation = [SafeMemoryNoAwaitDocs];
+}
+
+def SafeMemoryMemoryUnsafe : Attr {
+  let Spellings = [CXX11<"safememory","memory_unsafe">];
+  let Documentation = [SafeMemoryMemoryUnsafeDocs];
+}
+
+def SafeMemoryNonDeterministic : Attr {
+  let Spellings = [CXX11<"safememory","non_deterministic">];
+  let Documentation = [SafeMemoryNonDeterministicDocs];
+}
+
+def SafeMemoryNoSideEffect : Attr {
+  let Spellings = [CXX11<"safememory","no_side_effect">];
+//  let Subjects = SubjectList<[CXXRecord]>;
+  let Documentation = [SafeMemoryNoSideEffectDocs];
+}
+
+def SafeMemoryNoSideEffectWhenConst : Attr {
+  let Spellings = [CXX11<"safememory","no_side_effect_when_const">];
+  let Documentation = [SafeMemoryNoSideEffectWhenConstDocs];
+}
+
+def SafeMemoryDeepConst : Attr {
+  let Spellings = [CXX11<"safememory","deep_const">];
+  let Documentation = [SafeMemoryDeepConstDocs];
+}
+
+def SafeMemoryDeepConstWhenParams : Attr {
+  let Spellings = [CXX11<"safememory","deep_const_when_params">];
+  let Documentation = [SafeMemoryDeepConstWhenParamsDocs];
+}
+
+def SafeMemoryAwaitable : Attr {
+  let Spellings = [CXX11<"safememory","awaitable">];
+  let Documentation = [SafeMemoryAwaitableDocs];
+}
+
+def SafeMemoryCheckAsUserCode : Attr {
+  let Spellings = [CXX11<"safememory","check_as_user_code">];
+  let Documentation = [SafeMemoryCheckAsUserCodeDocs];
+}
diff --git a/clang/include/clang/Basic/AttrDocs.td b/clang/include/clang/Basic/AttrDocs.td
index 833127ed4..a3b852b0d 100644
--- a/clang/include/clang/Basic/AttrDocs.td
+++ b/clang/include/clang/Basic/AttrDocs.td
@@ -4947,3 +4947,104 @@ Requirements on Development Tools - Engineering Specification Documentation
 <https://developer.arm.com/docs/ecm0359818/latest/>`_ for more information.
   }];
 }
+
+
+def DocCatSafeMemory : DocumentationCategory<"safememory specifics"> {
+  let Content = [{
+Attributes specifics to ``safememory`` checker tools and libraries.
+  }];
+}
+
+def SafeMemoryNakedStructDocs : Documentation {
+  let Category = DocCatSafeMemory;
+  let Content = [{
+This attribute is used on class / struct declaration.
+Such classes can be created only on the stack and may contain naked ptrs.
+}];
+}
+
+def SafeMemoryMayExtendDocs : Documentation {
+  let Category = DocCatSafeMemory;
+  let Content = [{
+This attribute is used on library parameter declaration to indicate that lifetime
+of the callable object may be extended beyond the time of the call.
+Checker will check that no reference to stack object is present in such arguments.
+}];
+}
+
+def SafeMemoryNoAwaitDocs : Documentation {
+  let Category = DocCatSafeMemory;
+  let Content = [{
+This attribute is used on library method declaration to indicate that returned
+awaitable doesn't need to be checked for co_await.
+}];
+}
+
+def SafeMemoryMemoryUnsafeDocs : Documentation {
+  let Category = DocCatSafeMemory;
+  let Content = [{
+This attribute is used on namespace declaration to indicate that
+elements inside such namespace shouln't be checked for memory safety.
+}];
+}
+
+def SafeMemoryNonDeterministicDocs : Documentation {
+  let Category = DocCatSafeMemory;
+  let Content = [{
+This attribute is used on namespace declaration to indicate that
+elements inside such namespace shouln't be checked for determinism.
+}];
+}
+
+
+def SafeMemoryNoSideEffectDocs : Documentation {
+  let Category = DocCatSafeMemory;
+  let Content = [{
+This attribute is used on function and method declaration to indicate
+it is side effect free.
+}];
+}
+
+def SafeMemoryNoSideEffectWhenConstDocs : Documentation {
+  let Category = DocCatSafeMemory;
+  let Content = [{
+This attribute is used on class declaration to indicate that all const
+methods are [[no_side_effect]]
+}];
+}
+
+def SafeMemoryDeepConstDocs : Documentation {
+  let Category = DocCatSafeMemory;
+  let Content = [{
+This attribute is used on class declaration to indicate that a `const`
+instance of this type is completely immutable.
+}];
+}
+
+def SafeMemoryDeepConstWhenParamsDocs : Documentation {
+  let Category = DocCatSafeMemory;
+  let Content = [{
+This attribute is used on class template declaration to indicate that
+when all type parameters are [[deep_const]] then such instantiation is also
+[[deep_const]].
+}];
+}
+
+def SafeMemoryAwaitableDocs : Documentation {
+  let Category = DocCatSafeMemory;
+  let Content = [{
+This attribute is used on class declaration to indicate that is an awaitable
+type and therefore it must be verified by that co_await is called on instances.
+}];
+}
+
+def SafeMemoryCheckAsUserCodeDocs : Documentation {
+  let Category = DocCatSafeMemory;
+  let Content = [{
+This attribute is used on namespaces declared inside library code,
+and indicates checker that it should be checked as if is user code.
+Is used when library code calls back into user provided template
+parameter types, and because of that check must be made after specific
+template parameter instantiation.
+}];
+}
diff --git a/clang/include/clang/Basic/DiagnosticSemaKinds.td b/clang/include/clang/Basic/DiagnosticSemaKinds.td
index 941f2cafc..0939d7aba 100644
--- a/clang/include/clang/Basic/DiagnosticSemaKinds.td
+++ b/clang/include/clang/Basic/DiagnosticSemaKinds.td
@@ -10877,4 +10877,8 @@ def err_probability_not_constant_float : Error<
 def err_probability_out_of_range : Error<
    "probability argument to __builtin_expect_with_probability is outside the "
    "range [0.0, 1.0]">;
+
+def err_unknown_safememory_attribute : Error<
+  "(C1) unknown attribute %0">;
+
 } // end of sema component.
diff --git a/clang/lib/AST/Expr.cpp b/clang/lib/AST/Expr.cpp
index 399e7e13c..3e935e487 100644
--- a/clang/lib/AST/Expr.cpp
+++ b/clang/lib/AST/Expr.cpp
@@ -387,6 +387,7 @@ DeclRefExpr::DeclRefExpr(const ASTContext &Ctx, ValueDecl *D,
   DeclRefExprBits.RefersToEnclosingVariableOrCapture =
       RefersToEnclosingVariableOrCapture;
   DeclRefExprBits.NonOdrUseReason = NOUR;
+  DeclRefExprBits.DezombifyFlags = 0;
   DeclRefExprBits.Loc = L;
   setDependence(computeDependence(this, Ctx));
 }
@@ -425,6 +426,7 @@ DeclRefExpr::DeclRefExpr(const ASTContext &Ctx,
         TemplateKWLoc);
   }
   DeclRefExprBits.HadMultipleCandidates = 0;
+  DeclRefExprBits.DezombifyFlags = 0;
   setDependence(computeDependence(this, Ctx));
 }
 
diff --git a/clang/lib/ASTMatchers/ASTMatchFinder.cpp b/clang/lib/ASTMatchers/ASTMatchFinder.cpp
index e88da16dd..3ca7a5f0b 100644
--- a/clang/lib/ASTMatchers/ASTMatchFinder.cpp
+++ b/clang/lib/ASTMatchers/ASTMatchFinder.cpp
@@ -447,6 +447,7 @@ public:
   bool TraverseNestedNameSpecifier(NestedNameSpecifier *NNS);
   bool TraverseNestedNameSpecifierLoc(NestedNameSpecifierLoc NNS);
   bool TraverseConstructorInitializer(CXXCtorInitializer *CtorInit);
+  bool TraverseCoroutineBodyStmt(CoroutineBodyStmt *CoroBody);
 
   // Matches children or descendants of 'Node' with 'BaseMatcher'.
   bool memoizedMatchesRecursively(const DynTypedNode &Node, ASTContext &Ctx,
@@ -976,6 +977,24 @@ bool MatchASTVisitor::TraverseDecl(Decl *DeclNode) {
   if (!DeclNode) {
     return true;
   }
+
+  //mb: we don't traverse decls in system-headers
+  // nor namespaces with [[safememory::memory_unsafe]] attr
+  if(DeclNode->hasAttr<SafeMemoryMemoryUnsafeAttr>()) {
+    return true;
+  }
+  else if (!isa<TranslationUnitDecl>(DeclNode)) {
+
+    auto &SourceManager = getASTContext().getSourceManager();
+    auto ExpansionLoc = SourceManager.getExpansionLoc(DeclNode->getLocation());
+    if (ExpansionLoc.isInvalid()) {
+      return true;
+    }
+    if (SourceManager.isInSystemHeader(ExpansionLoc)) {
+      return true;
+    }
+  }
+
   match(*DeclNode);
   return RecursiveASTVisitor<MatchASTVisitor>::TraverseDecl(DeclNode);
 }
@@ -1035,6 +1054,16 @@ bool MatchASTVisitor::TraverseConstructorInitializer(
       CtorInit);
 }
 
+bool MatchASTVisitor::TraverseCoroutineBodyStmt(CoroutineBodyStmt *CoroBody) {
+  if (!CoroBody)
+    return true;
+
+  match(*CoroBody);
+
+  //mb:don't go into automatic coro stuff, only traverse the body
+  return RecursiveASTVisitor<MatchASTVisitor>::TraverseStmt(CoroBody->getBody());
+}
+
 class MatchASTConsumer : public ASTConsumer {
 public:
   MatchASTConsumer(MatchFinder *Finder,
diff --git a/clang/lib/ASTMatchers/ASTMatchersInternal.cpp b/clang/lib/ASTMatchers/ASTMatchersInternal.cpp
index 4b9baf7a0..e749707e4 100644
--- a/clang/lib/ASTMatchers/ASTMatchersInternal.cpp
+++ b/clang/lib/ASTMatchers/ASTMatchersInternal.cpp
@@ -1020,5 +1020,7 @@ const internal::VariadicDynCastAllOfMatcher<OMPClause, OMPDefaultClause>
 const internal::VariadicDynCastAllOfMatcher<Decl, CXXDeductionGuideDecl>
     cxxDeductionGuideDecl;
 
+const internal::VariadicDynCastAllOfMatcher<Stmt, CoroutineBodyStmt> coroutineBodyStmt;
+
 } // end namespace ast_matchers
 } // end namespace clang
diff --git a/clang/lib/ASTMatchers/Dynamic/Registry.cpp b/clang/lib/ASTMatchers/Dynamic/Registry.cpp
index ec2215804..c264adae6 100644
--- a/clang/lib/ASTMatchers/Dynamic/Registry.cpp
+++ b/clang/lib/ASTMatchers/Dynamic/Registry.cpp
@@ -544,6 +544,9 @@ RegistryMaps::RegistryMaps() {
   REGISTER_MATCHER(voidType);
   REGISTER_MATCHER(whileStmt);
   REGISTER_MATCHER(withInitializer);
+
+  REGISTER_MATCHER(coroutineBodyStmt);
+  REGISTER_MATCHER(hasCoroutineBody);
 }
 
 RegistryMaps::~RegistryMaps() = default;
diff --git a/clang/lib/Frontend/InitHeaderSearch.cpp b/clang/lib/Frontend/InitHeaderSearch.cpp
index bc31445d6..58768feb6 100644
--- a/clang/lib/Frontend/InitHeaderSearch.cpp
+++ b/clang/lib/Frontend/InitHeaderSearch.cpp
@@ -456,6 +456,12 @@ void InitHeaderSearch::AddDefaultIncludePaths(const LangOptions &Lang,
       HSOpts.UseStandardCXXIncludes && HSOpts.UseStandardSystemIncludes) {
     if (HSOpts.UseLibcxx) {
       AddPath("/usr/include/c++/v1", CXXSystem, false);
+      if (triple.isOSDarwin()) {
+        if(!HasSysroot) {
+            AddUnmappedPath("/Library/Developer/CommandLineTools/usr/include/c++/v1", CXXSystem, false);
+            AddUnmappedPath("/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include", CXXSystem, false);
+        }
+      }
     } else {
       AddDefaultCPlusPlusIncludePaths(Lang, triple, HSOpts);
     }
diff --git a/clang/lib/Rewrite/HTMLRewrite.cpp b/clang/lib/Rewrite/HTMLRewrite.cpp
index e304fbbed..c961659de 100644
--- a/clang/lib/Rewrite/HTMLRewrite.cpp
+++ b/clang/lib/Rewrite/HTMLRewrite.cpp
@@ -347,7 +347,7 @@ h1 { font-size:14pt }
 }
 .macro { color: DarkMagenta; }
 
-#tooltiphint {
+" R"#tooltiphint {
   position: fixed;
   width: 50em;
   margin-left: -25em;
diff --git a/clang/lib/Sema/SemaDeclAttr.cpp b/clang/lib/Sema/SemaDeclAttr.cpp
index a9a2a19b4..61526327a 100644
--- a/clang/lib/Sema/SemaDeclAttr.cpp
+++ b/clang/lib/Sema/SemaDeclAttr.cpp
@@ -6815,11 +6815,16 @@ static void ProcessDeclAttribute(Sema &S, Scope *scope, Decl *D,
   // though they were unknown attributes.
   if (AL.getKind() == ParsedAttr::UnknownAttribute ||
       !AL.existsInTarget(S.Context.getTargetInfo())) {
-    S.Diag(AL.getLoc(),
-           AL.isDeclspecAttribute()
-               ? (unsigned)diag::warn_unhandled_ms_attribute_ignored
-               : (unsigned)diag::warn_unknown_attribute_ignored)
-        << AL;
+    if(AL.hasScope() && AL.getScopeName()->getName() == "safememory") {
+      S.Diag(AL.getLoc(), diag::err_unknown_safememory_attribute) << AL.getNormalizedFullName();
+    }
+    else {
+	    S.Diag(AL.getLoc(),
+	           AL.isDeclspecAttribute()
+	               ? (unsigned)diag::warn_unhandled_ms_attribute_ignored
+	               : (unsigned)diag::warn_unknown_attribute_ignored)
+	        << AL;
+    }
     return;
   }
 
@@ -7450,6 +7455,40 @@ static void ProcessDeclAttribute(Sema &S, Scope *scope, Decl *D,
   case ParsedAttr::AT_UseHandle:
     handleHandleAttr<UseHandleAttr>(S, D, AL);
     break;
+
+  case ParsedAttr::AT_SafeMemoryNakedStruct:
+    handleSimpleAttribute<SafeMemoryNakedStructAttr>(S, D, AL);
+    break;
+  case ParsedAttr::AT_SafeMemoryMayExtend:
+    handleSimpleAttribute<SafeMemoryMayExtendAttr>(S, D, AL);
+    break;
+  case ParsedAttr::AT_SafeMemoryNoAwait:
+    handleSimpleAttribute<SafeMemoryNoAwaitAttr>(S, D, AL);
+    break;
+  case ParsedAttr::AT_SafeMemoryMemoryUnsafe:
+    handleSimpleAttribute<SafeMemoryMemoryUnsafeAttr>(S, D, AL);
+    break;
+  case ParsedAttr::AT_SafeMemoryNonDeterministic:
+    handleSimpleAttribute<SafeMemoryNonDeterministicAttr>(S, D, AL);
+    break;
+  case ParsedAttr::AT_SafeMemoryNoSideEffect:
+    handleSimpleAttribute<SafeMemoryNoSideEffectAttr>(S, D, AL);
+    break;
+  case ParsedAttr::AT_SafeMemoryNoSideEffectWhenConst:
+    handleSimpleAttribute<SafeMemoryNoSideEffectWhenConstAttr>(S, D, AL);
+    break;
+  case ParsedAttr::AT_SafeMemoryDeepConst:
+    handleSimpleAttribute<SafeMemoryDeepConstAttr>(S, D, AL);
+    break;
+  case ParsedAttr::AT_SafeMemoryDeepConstWhenParams:
+    handleSimpleAttribute<SafeMemoryDeepConstWhenParamsAttr>(S, D, AL);
+    break;
+  case ParsedAttr::AT_SafeMemoryAwaitable:
+    handleSimpleAttribute<SafeMemoryAwaitableAttr>(S, D, AL);
+    break;
+  case ParsedAttr::AT_SafeMemoryCheckAsUserCode:
+    handleSimpleAttribute<SafeMemoryCheckAsUserCodeAttr>(S, D, AL);
+    break;
   }
 }
 
diff --git a/clang/lib/Sema/SemaDeclCXX.cpp b/clang/lib/Sema/SemaDeclCXX.cpp
index 22bf35dbd..edbc2a247 100644
--- a/clang/lib/Sema/SemaDeclCXX.cpp
+++ b/clang/lib/Sema/SemaDeclCXX.cpp
@@ -16820,8 +16820,8 @@ bool Sema::CheckOverridingFunctionAttributes(const CXXMethodDecl *New,
   const auto *NewFT = New->getType()->castAs<FunctionProtoType>();
   const auto *OldFT = Old->getType()->castAs<FunctionProtoType>();
 
-  if (OldFT->hasExtParameterInfos()) {
-    for (unsigned I = 0, E = OldFT->getNumParams(); I != E; ++I)
+  if (OldFT->hasExtParameterInfos() || NewFT->hasExtParameterInfos()) {
+    for (unsigned I = 0, E = OldFT->getNumParams(); I != E; ++I) {
       // A parameter of the overriding method should be annotated with noescape
       // if the corresponding parameter of the overridden method is annotated.
       if (OldFT->getExtParameterInfo(I).isNoEscape() &&
@@ -16831,6 +16831,7 @@ bool Sema::CheckOverridingFunctionAttributes(const CXXMethodDecl *New,
         Diag(Old->getParamDecl(I)->getLocation(),
              diag::note_overridden_marked_noescape);
       }
+    }
   }
 
   // Virtual overrides must have the same code_seg.
diff --git a/clang/tools/CMakeLists.txt b/clang/tools/CMakeLists.txt
index e46c3669a..0c8b3170d 100644
--- a/clang/tools/CMakeLists.txt
+++ b/clang/tools/CMakeLists.txt
@@ -40,3 +40,7 @@ add_llvm_external_project(clang-tools-extra extra)
 
 # libclang may require clang-tidy in clang-tools-extra.
 add_clang_subdirectory(libclang)
+
+# Add safememory here, because using LLVM_EXTERNAL_PROJECTS works for pure llvm
+# and we actually need a clang external project
+add_llvm_external_project(safememory)
diff --git a/llvm/cmake/modules/HandleLLVMOptions.cmake b/llvm/cmake/modules/HandleLLVMOptions.cmake
index 5ef22eb49..e91c4c8d6 100644
--- a/llvm/cmake/modules/HandleLLVMOptions.cmake
+++ b/llvm/cmake/modules/HandleLLVMOptions.cmake
@@ -478,6 +478,10 @@ if( MSVC )
       endif()
     endif()
   endif()
+  # By default MSVC has a 2^16 limit on the number of sections in an object file,
+  # but in many objects files need more than that. This flag is to increase the
+  # number of sections.
+  append("/bigobj" CMAKE_CXX_FLAGS)
 endif( MSVC )
 
 # Warnings-as-errors handling for GCC-compatible compilers:
