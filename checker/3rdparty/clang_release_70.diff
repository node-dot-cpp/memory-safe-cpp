diff --git a/include/clang/AST/Expr.h b/include/clang/AST/Expr.h
index e7e32b9..62da70a 100644
--- a/include/clang/AST/Expr.h
+++ b/include/clang/AST/Expr.h
@@ -1031,6 +1031,8 @@ public:
     DeclRefExprBits.HadMultipleCandidates = 0;
     DeclRefExprBits.RefersToEnclosingVariableOrCapture =
         RefersToEnclosingVariableOrCapture;
+    DeclRefExprBits.DezombifyFlags = 0;
+
     computeDependence(D->getASTContext());
   }
 
@@ -1186,6 +1188,38 @@ public:
     return DeclRefExprBits.RefersToEnclosingVariableOrCapture;
   }
 
+  /// Sets the flag telling whether this expression refers to
+  /// a variable of a type that has explicit dezombified.
+  void setDezombiefyAlreadyPresent() {
+    DeclRefExprBits.DezombifyFlags = DezombifyAlreadyPresent;
+  }
+
+  /// Sets the flag telling whether this expression refers to
+  /// a variable of a type that may need to be dezombified.
+  void setDezombiefyCandidate() {
+    DeclRefExprBits.DezombifyFlags = DezombifyCandidate;
+  }
+
+  /// Sets the flag telling whether this expression refers to
+  /// a variable of a type that may need to be dezombified,
+  /// but a deeper flow analysis prove dezombified not really needed.
+  void setDezombiefyCandidateButRelaxed() {
+    DeclRefExprBits.DezombifyFlags = DezombifyCandidateButRelaxed;
+  }
+
+  /// Does this DeclRefExpr refer to a varialbe that may
+  /// need to be dezombified after all analysis stages.
+  bool isDezombiefyCandidateOrRelaxed() const {
+    return DeclRefExprBits.DezombifyFlags == DezombifyCandidate ||
+      DeclRefExprBits.DezombifyFlags == DezombifyCandidateButRelaxed;
+  }
+
+  /// Does this DeclRefExpr refer to a varialbe that really
+  /// needs to be dezombified after all analysis stages.
+  bool needsDezombiefyInstrumentation() const {
+    return DeclRefExprBits.DezombifyFlags == DezombifyCandidate;
+  }
+
   static bool classof(const Stmt *T) {
     return T->getStmtClass() == DeclRefExprClass;
   }
diff --git a/include/clang/AST/ExprCXX.h b/include/clang/AST/ExprCXX.h
index 5ce55bd..a1dcb8c 100644
--- a/include/clang/AST/ExprCXX.h
+++ b/include/clang/AST/ExprCXX.h
@@ -986,6 +986,7 @@ public:
 class CXXThisExpr : public Expr {
   SourceLocation Loc;
   bool Implicit : 1;
+  unsigned DezombiefyFlags :2;
 
 public:
   CXXThisExpr(SourceLocation L, QualType Type, bool isImplicit)
@@ -995,7 +996,7 @@ public:
              Type->isDependentType(), Type->isDependentType(),
              Type->isInstantiationDependentType(),
              /*ContainsUnexpandedParameterPack=*/false),
-        Loc(L), Implicit(isImplicit) {}
+        Loc(L), Implicit(isImplicit), DezombiefyFlags(0) {}
 
   CXXThisExpr(EmptyShell Empty) : Expr(CXXThisExprClass, Empty) {}
 
@@ -1010,6 +1011,38 @@ public:
   bool isImplicit() const { return Implicit; }
   void setImplicit(bool I) { Implicit = I; }
 
+  /// Sets the flag telling whether this expression refers to
+  /// a variable of a type that has explicit dezombified.
+  void setDezombiefyAlreadyPresent() {
+    DezombiefyFlags = DezombifyAlreadyPresent;
+  }
+
+  /// Sets the flag telling whether this expression refers to
+  /// a variable of a type that may need to be dezombified.
+  void setDezombiefyCandidate() {
+    DezombiefyFlags = DezombifyCandidate;
+  }
+
+  /// Sets the flag telling whether this expression refers to
+  /// a variable of a type that may need to be dezombified,
+  /// but a deeper flow analysis prove dezombified not really needed.
+  void setDezombiefyCandidateButRelaxed() {
+    DezombiefyFlags = DezombifyCandidateButRelaxed;
+  }
+
+  /// Does this DeclRefExpr refer to a varialbe that may
+  /// need to be dezombified after all analysis stages.
+  bool isDezombiefyCandidateOrRelaxed() const {
+    return DezombiefyFlags == DezombifyCandidate ||
+      DezombiefyFlags == DezombifyCandidateButRelaxed;
+  }
+
+  /// Does this DeclRefExpr refer to a varialbe that really
+  /// needs to be dezombified after all analysis stages.
+  bool needsDezombiefyInstrumentation() const {
+    return DezombiefyFlags == DezombifyCandidate;
+  }
+
   static bool classof(const Stmt *T) {
     return T->getStmtClass() == CXXThisExprClass;
   }
diff --git a/include/clang/AST/Stmt.h b/include/clang/AST/Stmt.h
index c957ccc..94a7802 100644
--- a/include/clang/AST/Stmt.h
+++ b/include/clang/AST/Stmt.h
@@ -183,6 +183,14 @@ protected:
     unsigned IsType : 1; // true if operand is a type, false if an expression.
   };
 
+  enum DREDezombifyFlags {
+    NoDezombify = 0,
+    DezombifyAlreadyPresent,
+    DezombifyCandidate,
+    DezombifyCandidateButRelaxed
+  };
+
+
   class DeclRefExprBitfields {
     friend class ASTStmtReader; // deserialization
     friend class DeclRefExpr;
@@ -194,6 +202,7 @@ protected:
     unsigned HasFoundDecl : 1;
     unsigned HadMultipleCandidates : 1;
     unsigned RefersToEnclosingVariableOrCapture : 1;
+    unsigned DezombifyFlags : 2;
   };
 
   class CastExprBitfields {
diff --git a/include/clang/AST/Type.h b/include/clang/AST/Type.h
index 9a8dd6f..c403674 100644
--- a/include/clang/AST/Type.h
+++ b/include/clang/AST/Type.h
@@ -3455,7 +3455,7 @@ public:
       ABIMask         = 0x0F,
       IsConsumed      = 0x10,
       HasPassObjSize  = 0x20,
-      IsNoEscape      = 0x40,
+      IsNoEscape      = 0x40
     };
     unsigned char Data = 0;
 
diff --git a/include/clang/ASTMatchers/ASTMatchers.h b/include/clang/ASTMatchers/ASTMatchers.h
index 51f2ce2..b13de57 100644
--- a/include/clang/ASTMatchers/ASTMatchers.h
+++ b/include/clang/ASTMatchers/ASTMatchers.h
@@ -6111,6 +6111,18 @@ AST_MATCHER(FunctionDecl, hasTrailingReturn) {
   return false;
 }
 
+
+/// Matches coroutine body  statements.
+extern const internal::VariadicDynCastAllOfMatcher<Stmt, CoroutineBodyStmt>
+    coroutineBodyStmt;
+
+/// Matches a coroutine that has a given body.
+AST_MATCHER_P(CoroutineBodyStmt, hasCoroutineBody, internal::Matcher<Stmt>, InnerMatcher) {
+  const Stmt *const Statement = internal::GetBodyMatcher<CoroutineBodyStmt>::get(Node);
+  return (Statement != nullptr &&
+          InnerMatcher.matches(*Statement, Finder, Builder));
+}
+
 } // namespace ast_matchers
 } // namespace clang
 
diff --git a/include/clang/Basic/Attr.td b/include/clang/Basic/Attr.td
index dc9edac..cfe7969 100644
--- a/include/clang/Basic/Attr.td
+++ b/include/clang/Basic/Attr.td
@@ -3004,3 +3004,33 @@ def InternalLinkage : InheritableAttr {
   let Subjects = SubjectList<[Var, Function, CXXRecord]>;
   let Documentation = [InternalLinkageDocs];
 }
+
+def NodeCppNakedStruct : InheritableAttr {
+  let Spellings = [CXX11<"nodecpp","naked_struct">];
+//  let Subjects = SubjectList<[CXXRecord]>;
+  let Documentation = [NodeCppNakedStructDocs];
+}
+
+def NodeCppMayExtend : InheritableAttr {
+  let Spellings = [CXX11<"nodecpp","may_extend_to_this">];
+//  let Subjects = SubjectList<[ParmVar]>;
+  let Documentation = [NodeCppMayExtendDocs];
+}
+
+def NodeCppNoAwait : InheritableAttr {
+  let Spellings = [CXX11<"nodecpp","no_await">];
+//  let Subjects = SubjectList<[ParmVar]>;
+  let Documentation = [NodeCppNoAwaitDocs];
+}
+
+def NodeCppMemoryUnsafe : InheritableAttr {
+  let Spellings = [CXX11<"nodecpp","memory_unsafe">];
+//  let Subjects = SubjectList<[Namespace]>;
+  let Documentation = [NodeCppMemoryUnsafeDocs];
+}
+
+def NodeCppNonDeterministic : InheritableAttr {
+  let Spellings = [CXX11<"nodecpp","non_deterministic">];
+//  let Subjects = SubjectList<[Namespace]>;
+  let Documentation = [NodeCppNonDeterministicDocs];
+}
diff --git a/include/clang/Basic/AttrDocs.td b/include/clang/Basic/AttrDocs.td
index 5a937b1..4819836 100644
--- a/include/clang/Basic/AttrDocs.td
+++ b/include/clang/Basic/AttrDocs.td
@@ -3458,3 +3458,51 @@ the resulting instructions with the call site, rather than with the
 corresponding line within the inlined callee.
   }];
 }
+def DocCatNodeCpp : DocumentationCategory<"Node-dot-cpp specifics"> {
+  let Content = [{
+Node-dot-cpp specific attributes
+  }];
+}
+
+
+def NodeCppNakedStructDocs : Documentation {
+  let Category = DocCatNodeCpp;
+  let Content = [{
+This attribute is used on class / struct declaration.
+Such classes can be created only on the stack and may contain naked ptrs.
+}];
+}
+
+def NodeCppMayExtendDocs : Documentation {
+  let Category = DocCatNodeCpp;
+  let Content = [{
+This attribute is used on library parameter declaration to indicate that lifetime
+of the callable object may be extended beyond the time of the call.
+Checker will check that no reference to stack object is present in such arguments.
+}];
+}
+
+def NodeCppNoAwaitDocs : Documentation {
+  let Category = DocCatNodeCpp;
+  let Content = [{
+This attribute is used on library method declaration to indicate that returned
+awaitable doesn't need to be checked for co_await.
+}];
+}
+
+def NodeCppMemoryUnsafeDocs : Documentation {
+  let Category = DocCatNodeCpp;
+  let Content = [{
+This attribute is used on namespace declaration to indicate that
+elements inside such namespace shouln't be checked for memory safety.
+}];
+}
+
+def NodeCppNonDeterministicDocs : Documentation {
+  let Category = DocCatNodeCpp;
+  let Content = [{
+This attribute is used on namespace declaration to indicate that
+elements inside such namespace shouln't be checked for determinism.
+}];
+}
diff --git a/include/clang/Basic/DiagnosticSemaKinds.td b/include/clang/Basic/DiagnosticSemaKinds.td
index b241856..f33df4a 100644
--- a/include/clang/Basic/DiagnosticSemaKinds.td
+++ b/include/clang/Basic/DiagnosticSemaKinds.td
@@ -9438,4 +9438,7 @@ def err_std_compare_type_not_supported : Error<
    "member '%2' is missing|"
    "the type is not trivially copyable|"
    "the type does not have the expected form}1">;
+
+def err_unknown_nodecpp_attribute : Error<
+  "(C1) unknown attribute %0">;
 } // end of sema component.
diff --git a/lib/AST/Expr.cpp b/lib/AST/Expr.cpp
index 50cff15..43048e1 100644
--- a/lib/AST/Expr.cpp
+++ b/lib/AST/Expr.cpp
@@ -384,6 +384,7 @@ DeclRefExpr::DeclRefExpr(const ASTContext &Ctx,
         TemplateKWLoc);
   }
   DeclRefExprBits.HadMultipleCandidates = 0;
+  DeclRefExprBits.DezombifyFlags = 0;
 
   computeDependence(Ctx);
 }
diff --git a/lib/ASTMatchers/ASTMatchFinder.cpp b/lib/ASTMatchers/ASTMatchFinder.cpp
index 63f8395..a749ff5 100644
--- a/lib/ASTMatchers/ASTMatchFinder.cpp
+++ b/lib/ASTMatchers/ASTMatchFinder.cpp
@@ -389,6 +389,7 @@ public:
   bool TraverseNestedNameSpecifier(NestedNameSpecifier *NNS);
   bool TraverseNestedNameSpecifierLoc(NestedNameSpecifierLoc NNS);
   bool TraverseConstructorInitializer(CXXCtorInitializer *CtorInit);
+  bool TraverseCoroutineBodyStmt(CoroutineBodyStmt *CoroBody);
 
   // Matches children or descendants of 'Node' with 'BaseMatcher'.
   bool memoizedMatchesRecursively(const ast_type_traits::DynTypedNode &Node,
@@ -842,6 +843,24 @@ bool MatchASTVisitor::TraverseDecl(Decl *DeclNode) {
   if (!DeclNode) {
     return true;
   }
+
+  //mb: we don't traverse decls in system-headers
+  // nor namespaces with [[nodecpp::memory_unsafe]] attr
+  if(DeclNode->hasAttr<NodeCppMemoryUnsafeAttr>()) {
+    return true;
+  }
+  else if (!isa<TranslationUnitDecl>(DeclNode)) {
+
+    auto &SourceManager = getASTContext().getSourceManager();
+    auto ExpansionLoc = SourceManager.getExpansionLoc(DeclNode->getLocStart());
+    if (ExpansionLoc.isInvalid()) {
+      return true;
+    }
+    if (SourceManager.isInSystemHeader(ExpansionLoc)) {
+      return true;
+    }
+  }
+
   match(*DeclNode);
   return RecursiveASTVisitor<MatchASTVisitor>::TraverseDecl(DeclNode);
 }
@@ -901,6 +920,16 @@ bool MatchASTVisitor::TraverseConstructorInitializer(
       CtorInit);
 }
 
+bool MatchASTVisitor::TraverseCoroutineBodyStmt(CoroutineBodyStmt *CoroBody) {
+  if (!CoroBody)
+    return true;
+
+  match(*CoroBody);
+
+  //mb:don't go into automatic coro stuff, only traverse the body
+  return RecursiveASTVisitor<MatchASTVisitor>::TraverseStmt(CoroBody->getBody());
+}
+
 class MatchASTConsumer : public ASTConsumer {
 public:
   MatchASTConsumer(MatchFinder *Finder,
diff --git a/lib/ASTMatchers/ASTMatchersInternal.cpp b/lib/ASTMatchers/ASTMatchersInternal.cpp
index 9cea2f5..3318647 100644
--- a/lib/ASTMatchers/ASTMatchersInternal.cpp
+++ b/lib/ASTMatchers/ASTMatchersInternal.cpp
@@ -833,5 +833,7 @@ AST_TYPELOC_TRAVERSE_MATCHER_DEF(
     AST_POLYMORPHIC_SUPPORTED_TYPES(BlockPointerType, MemberPointerType,
                                     PointerType, ReferenceType));
 
+const internal::VariadicDynCastAllOfMatcher<Stmt, CoroutineBodyStmt> coroutineBodyStmt;
+
 } // end namespace ast_matchers
 } // end namespace clang
diff --git a/lib/ASTMatchers/Dynamic/Registry.cpp b/lib/ASTMatchers/Dynamic/Registry.cpp
index 4d2d76f..4564635 100644
--- a/lib/ASTMatchers/Dynamic/Registry.cpp
+++ b/lib/ASTMatchers/Dynamic/Registry.cpp
@@ -486,6 +486,9 @@ RegistryMaps::RegistryMaps() {
   REGISTER_MATCHER(voidType);
   REGISTER_MATCHER(whileStmt);
   REGISTER_MATCHER(withInitializer);
+
+  REGISTER_MATCHER(coroutineBodyStmt);
+  REGISTER_MATCHER(hasCoroutineBody);
 }
 
 RegistryMaps::~RegistryMaps() = default;
diff --git a/lib/Frontend/InitHeaderSearch.cpp b/lib/Frontend/InitHeaderSearch.cpp
index 8a70404..113c960 100644
--- a/lib/Frontend/InitHeaderSearch.cpp
+++ b/lib/Frontend/InitHeaderSearch.cpp
@@ -488,6 +488,11 @@ void InitHeaderSearch::AddDefaultIncludePaths(const LangOptions &Lang,
           llvm::sys::path::append(P, "include", "c++", "v1");
           AddUnmappedPath(P, CXXSystem, false);
         }
+
+        if(!HasSysroot) {
+            AddUnmappedPath("/Library/Developer/CommandLineTools/usr/include/c++/v1", CXXSystem, false);
+            AddUnmappedPath("/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include", CXXSystem, false);
+        }
       }
       AddPath("/usr/include/c++/v1", CXXSystem, false);
     } else {
diff --git a/lib/Sema/SemaDeclAttr.cpp b/lib/Sema/SemaDeclAttr.cpp
index 77deed6..4f6779d 100644
--- a/lib/Sema/SemaDeclAttr.cpp
+++ b/lib/Sema/SemaDeclAttr.cpp
@@ -5962,10 +5962,16 @@ static void ProcessDeclAttribute(Sema &S, Scope *scope, Decl *D,
   // though they were unknown attributes.
   if (AL.getKind() == ParsedAttr::UnknownAttribute ||
       !AL.existsInTarget(S.Context.getTargetInfo())) {
-    S.Diag(AL.getLoc(), AL.isDeclspecAttribute()
-                            ? diag::warn_unhandled_ms_attribute_ignored
-                            : diag::warn_unknown_attribute_ignored)
-        << AL.getName();
+
+    if(AL.hasScope() && AL.getScopeName()->getName() == "nodecpp") {
+      S.Diag(AL.getLoc(), diag::err_unknown_nodecpp_attribute) << AL.getName();
+    }
+    else {
+      S.Diag(AL.getLoc(), AL.isDeclspecAttribute()
+                              ? diag::warn_unhandled_ms_attribute_ignored
+                              : diag::warn_unknown_attribute_ignored)
+          << AL.getName();
+    }
     return;
   }
 
@@ -6604,6 +6610,22 @@ static void ProcessDeclAttribute(Sema &S, Scope *scope, Decl *D,
   case ParsedAttr::AT_XRayLogArgs:
     handleXRayLogArgsAttr(S, D, AL);
     break;
+  case ParsedAttr::AT_NodeCppNakedStruct:
+    handleSimpleAttribute<NodeCppNakedStructAttr>(S, D, AL);
+    break;
+  case ParsedAttr::AT_NodeCppMayExtend:
+    handleSimpleAttribute<NodeCppMayExtendAttr>(S, D, AL);
+    break;
+  case ParsedAttr::AT_NodeCppNoAwait:
+    handleSimpleAttribute<NodeCppNoAwaitAttr>(S, D, AL);
+    break;
+  case ParsedAttr::AT_NodeCppMemoryUnsafe:
+    handleSimpleAttribute<NodeCppMemoryUnsafeAttr>(S, D, AL);
+    break;
+  case ParsedAttr::AT_NodeCppNonDeterministic:
+    handleSimpleAttribute<NodeCppNonDeterministicAttr>(S, D, AL);
+    break;
+
   }
 }
 
diff --git a/lib/Sema/SemaDeclCXX.cpp b/lib/Sema/SemaDeclCXX.cpp
index 4cf3abd..17bb5fb 100644
--- a/lib/Sema/SemaDeclCXX.cpp
+++ b/lib/Sema/SemaDeclCXX.cpp
@@ -14551,8 +14551,8 @@ bool Sema::CheckOverridingFunctionAttributes(const CXXMethodDecl *New,
   const auto *NewFT = New->getType()->getAs<FunctionProtoType>();
   const auto *OldFT = Old->getType()->getAs<FunctionProtoType>();
 
-  if (OldFT->hasExtParameterInfos()) {
-    for (unsigned I = 0, E = OldFT->getNumParams(); I != E; ++I)
+  if (OldFT->hasExtParameterInfos() || NewFT->hasExtParameterInfos()) {
+    for (unsigned I = 0, E = OldFT->getNumParams(); I != E; ++I) {
       // A parameter of the overriding method should be annotated with noescape
       // if the corresponding parameter of the overridden method is annotated.
       if (OldFT->getExtParameterInfo(I).isNoEscape() &&
@@ -14562,6 +14562,7 @@ bool Sema::CheckOverridingFunctionAttributes(const CXXMethodDecl *New,
         Diag(Old->getParamDecl(I)->getLocation(),
              diag::note_overridden_marked_noescape);
       }
+    }
   }
 
   // Virtual overrides must have the same code_seg.
diff --git a/lib/Tooling/CompilationDatabase.cpp b/lib/Tooling/CompilationDatabase.cpp
index 31a769f..6bdcd8a 100644
--- a/lib/Tooling/CompilationDatabase.cpp
+++ b/lib/Tooling/CompilationDatabase.cpp
@@ -294,7 +294,8 @@ static bool stripPositionalArgs(std::vector<const char *> Args,
     // Collect only for Assemble and Compile jobs. If we do all jobs we get
     // duplicates since Link jobs point to Assemble jobs as inputs.
     if (Cmd.getSource().getKind() == driver::Action::AssembleJobClass ||
-        Cmd.getSource().getKind() == driver::Action::CompileJobClass) {
+        Cmd.getSource().getKind() == driver::Action::CompileJobClass ||
+        Cmd.getSource().getKind() == driver::Action::BackendJobClass) {
       CompileAnalyzer.run(&Cmd.getSource());
     }
   }
diff --git a/tools/CMakeLists.txt b/tools/CMakeLists.txt
index 9f76d36..105215e 100644
--- a/tools/CMakeLists.txt
+++ b/tools/CMakeLists.txt
@@ -35,3 +35,6 @@ add_llvm_external_project(clang-tools-extra extra)
 
 # libclang may require clang-tidy in clang-tools-extra.
 add_clang_subdirectory(libclang)
+
+# Add nodecpp here, because using LLVM_EXTERNAL_PROJECTS don't seem to work
+add_llvm_external_project(checker)
